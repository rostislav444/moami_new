import { CategoryState, CollectionState } from '@/types/categories';

export async function getCategoriesServer(): Promise<CategoryState[]> {
    // –î–ª—è server-side –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π URL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const API_URL = process.env.API_URL || 'http://web:8000';
    
    console.log('üåê getCategoriesServer - API_URL:', API_URL);
    
    if (!API_URL) {
        console.warn('‚ö†Ô∏è API_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
        return [];
    }

    const fullUrl = `${API_URL}/api/category/categories/`;
    console.log('üì° –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫:', fullUrl);

    try {
        const response = await fetch(fullUrl, {
            next: { revalidate: 3600 },
            headers: {
                'Content-Type': 'application/json',
                'Accept-Language': 'uk',
            },
        });

        console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç API:', {
            status: response.status,
            statusText: response.statusText,
            url: response.url
        });

        if (!response.ok) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ API: ${response.status} ${response.statusText}`);
            return [];
        }

        const data = await response.json();
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', {
            categoriesCount: Array.isArray(data) ? data.length : '–Ω–µ –º–∞—Å—Å–∏–≤',
            firstCategory: Array.isArray(data) && data.length > 0 ? data[0].name : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        });
        
        return data;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
        return [];
    }
}

export async function getCollectionsServer(): Promise<CollectionState[]> {
    // –î–ª—è server-side –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π URL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const API_URL = process.env.API_URL || 'http://web:8000';
    
    if (!API_URL) {
        console.warn('API_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤');
        return [];
    }

    try {
        const response = await fetch(`${API_URL}/api/category/collections/`, {
            next: { revalidate: 3600 },
            headers: {
                'Content-Type': 'application/json',
                'Accept-Language': 'uk',
            },
        });

        if (!response.ok) {
            console.error(`–û—à–∏–±–∫–∞ API: ${response.status} ${response.statusText}`);
            return [];
        }

        const data = await response.json();
        return data;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–π:', error);
        return [];
    }
}

export async function getCategoryByIdServer(id: number): Promise<CategoryState | null> {
    // –î–ª—è server-side –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π URL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    const API_URL = process.env.API_URL || 'http://web:8000';
    
    if (!API_URL) {
        return null;
    }

    try {
        const response = await fetch(`${API_URL}/api/category/categories/${id}/`, {
            next: { revalidate: 3600 },
            headers: {
                'Content-Type': 'application/json',
                'Accept-Language': 'uk',
            },
        });

        if (!response.ok) {
            return null;
        }

        return response.json();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', error);
        return null;
    }
} 